// bot.js

const TelegramBot = require('node-telegram-bot-api');
const schedule = require('node-schedule');

const config = require('./config');
const dbModule = require('./database');

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–æ–¥—É–ª–∏ –ª–æ–≥–∏–∫–∏
const admin = require('./admin');
const programmer = require('./programmer');

// –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = {};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(config.BOT_TOKEN, { polling: true });


bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    // 1) –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø—É—Å—Ç–∞—è –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ users
    dbModule.getAllUsers((err, users) => {
        if (err) {
            bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–∑ –ë–î.');
            return;
        }

        // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è (–Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        if (users.length === 0) {
            // –ò –µ—Å–ª–∏ userId –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ config.ADMINS, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –±–∞–∑—É –∫–∞–∫ –∞–¥–º–∏–Ω–∞
            if (config.ADMINS.includes(userId)) {
                dbModule.addUser(userId, msg.from.first_name || 'Admin', 'admin', (errAdd) => {
                    if (errAdd) {
                        bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞.');
                    } else {
                        bot.sendMessage(chatId, '–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞–∫ –ø–µ—Ä–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!');
                        // –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—É—é –ª–æ–≥–∏–∫—É
                        showMenuOrSomething(chatId, userId);
                    }
                });
            } else {
                // –ï—Å–ª–∏ –±–∞–∑–∞ –ø—É—Å—Ç–∞, –∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–ø–∏—Å–∫–µ config.ADMINS ‚Äî
                // –º–æ–∂–Ω–æ –ª–∏–±–æ –æ—Ç–∫–∞–∑–∞—Ç—å, –ª–∏–±–æ –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∑–∞—Ç—å: ¬´–£ –Ω–∞—Å –Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤¬ª.
                bot.sendMessage(chatId, '–ë–∞–∑–∞ –ø—É—Å—Ç–∞, –Ω–æ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ç–æ–º—É, –∫—Ç–æ –ø—Ä–æ–ø–∏—Å–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ.');
            }
        } else {
            // –ï—Å–ª–∏ –±–∞–∑–∞ –Ω–µ –ø—É—Å—Ç–∞ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—É—é –ª–æ–≥–∏–∫—É
            showMenuOrSomething(chatId, userId);
        }
    });
});

// –î–∞–ª–µ–µ –æ–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞
function showMenuOrSomething(chatId, userId) {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î (–æ–Ω —É–∂–µ —Ç–∞–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–≤—ã–π —Å—Ç–∞—Ä—Ç)
    dbModule.getUserById(userId, (err, user) => {
        if (err || !user) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î ‚Üí –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            // (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ¬ª –∏–ª–∏ ¬´–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É¬ª)
            return bot.sendMessage(chatId, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
        }

        // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (user.role === 'admin') {
            admin.showAdminMainMenu(bot, chatId);
        } else {
            programmer.showProgrammerMainMenu(bot, chatId, userStates, userId);
        }
    });
}


// ----------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback_query -----------
bot.on('callback_query', (query) => {
    const chatId = query.message.chat.id;
    const userId = query.from.id;
    const data = query.data;

    dbModule.getUserById(userId, (err, user) => {
        if (err || !user) {
            bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î.');
            return;
        }

        // –û–±—â–µ–µ: unarchive (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
        if (data.startsWith('unarchive_')) {
            if (!admin.isAdmin(userId)) {
                bot.sendMessage(chatId, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è.');
                return;
            }
            const taskId = data.replace('unarchive_', '');
            admin.unarchiveTask(bot, chatId, taskId);
            return;
        }

        // ----- –õ–û–ì–ò–ö–ê –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê -----
        if (admin.isAdmin(userId)) {
            switch (data) {
                case 'add_task':
                    userStates[userId] = { state: 'admin_adding_title' };
                    bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:');
                    return;

                case 'view_tasks_admin':
                    admin.showAdminTaskFilters(bot, chatId);
                    return;

                case 'manage_users':
                    admin.showUserManagementMenu(bot, chatId);
                    return;

                case 'add_programmer':
                    userStates[userId] = { state: 'admin_adding_programmer' };
                    bot.sendMessage(chatId, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Ç—Ä–æ–∫—É: TelegramID –ò–º—è\n–ù–∞–ø—Ä–∏–º–µ—Ä: 12345 –ò–≤–∞–Ω');
                    return;

                case 'list_users':
                    dbModule.getAllUsers((errUsers, users) => {
                        if (errUsers) {
                            bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
                            return;
                        }
                        if (!users || users.length === 0) {
                            bot.sendMessage(chatId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
                            return;
                        }
                        let text = '–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n';
                        users.forEach(u => {
                            text += `ID: ${u.id}, –ò–º—è: ${u.name}, –†–æ–ª—å: ${u.role}\n`;
                        });
                        bot.sendMessage(chatId, text);
                    });
                    return;

                default:
                    // –§–∏–ª—å—Ç—Ä –∑–∞–¥–∞—á –¥–ª—è –∞–¥–º–∏–Ω–∞
                    if (data.startsWith('filter_priority_')) {
                        const priority = data.replace('filter_priority_', '');
                        admin.filterTasksForAdmin(bot, chatId, priority);
                        return;
                    }
            }
        }

        // ----- –õ–û–ì–ò–ö–ê –ü–†–û–ì–†–ê–ú–ú–ò–°–¢–ê (–∏ –∞–¥–º–∏–Ω–∞ –≤ —Ä–æ–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è) -----
        if (user.role === 'programmer' || user.role === 'admin') {
            if (data === 'programmer_view_tasks') {
                programmer.showProgrammerTaskFilters(bot, chatId, userStates, userId);
                return;
            }
            if (data === 'programmer_back_to_main') {
                programmer.showProgrammerMainMenu(bot, chatId, userStates, userId);
                return;
            }
            if (data === 'programmer_back_to_filter') {
                programmer.showProgrammerTaskFilters(bot, chatId, userStates, userId);
                return;
            }
            // –§–∏–ª—å—Ç—Ä –∑–∞–¥–∞—á
            if (data.startsWith('programmer_filter_')) {
                const priority = data.replace('programmer_filter_', '');
                if (priority === 'ALL') {
                    programmer.filterTasksForProgrammer(bot, chatId, userStates, userId, 'ALL');
                } else {
                    programmer.filterTasksForProgrammer(bot, chatId, userStates, userId, priority);
                }
                return;
            }
            // –ó–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–¥–∞—á–∏
            if (data.startsWith('programmer_close_')) {
                const taskId = data.replace('programmer_close_', '');
                programmer.closeTask(bot, chatId, userStates, userId, taskId);
                return;
            }
        }
    });
});

// ----------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π -----------
bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const text = msg.text;

    dbModule.getUserById(userId, (err, user) => {
        if (err || !user) {
            bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–î.');
            return;
        }

        // –ï—Å–ª–∏ –Ω–µ—Ç userStates[userId], –∑–Ω–∞—á–∏—Ç –Ω–µ –∂–¥—ë–º –Ω–∏—á–µ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ ‚Üí –Ω–µ–∂–¥–∞–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
        if (!userStates[userId]) {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            if (admin.isAdmin(userId)) {
                admin.showAdminMainMenu(bot, chatId);
            } else {
                programmer.showProgrammerMainMenu(bot, chatId, userStates, userId);
            }
            return;
        }

        // --------- –°–æ—Å—Ç–æ—è–Ω–∏—è –ê–î–ú–ò–ù–ê ---------
        const state = userStates[userId].state;
        if (state === 'admin_adding_title') {
            userStates[userId].title = text;
            userStates[userId].state = 'admin_adding_description';
            bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:');
            return;
        }
        if (state === 'admin_adding_description') {
            userStates[userId].description = text;
            userStates[userId].state = 'admin_adding_priority';
            const options = {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: 'üî¥ –ö—Ä–∞—Å–Ω—ã–π',   callback_data: 'admin_priority_–ö—Ä–∞—Å–Ω—ã–π' },
                            { text: 'üü† –û—Ä–∞–Ω–∂–µ–≤—ã–π', callback_data: 'admin_priority_–û—Ä–∞–Ω–∂–µ–≤—ã–π' },
                            { text: 'üü° –ñ–µ–ª—Ç—ã–π',   callback_data: 'admin_priority_–ñ–µ–ª—Ç—ã–π' },
                        ],
                        [
                            { text: 'üü¢ –ó–µ–ª–µ–Ω—ã–π', callback_data: 'admin_priority_–ó–µ–ª–µ–Ω—ã–π' },
                            { text: 'üîµ –°–∏–Ω–∏–π',   callback_data: 'admin_priority_–°–∏–Ω–∏–π' },
                        ],
                    ],
                },
            };
            bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏:', options);
            return;
        }
        if (state === 'admin_adding_programmer') {
            const parts = text.split(' ');
            if (parts.length < 2) {
                bot.sendMessage(chatId, '–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏: ID –ò–º—è\n–ù–∞–ø—Ä–∏–º–µ—Ä: 12345 –ò–≤–∞–Ω');
                return;
            }
            const newUserId = parts[0];
            const newUserName = parts.slice(1).join(' ');
            dbModule.addUser(newUserId, newUserName, 'programmer', (errAdd) => {
                if (errAdd) {
                    bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, ID —É–∂–µ –∑–∞–Ω—è—Ç.');
                    return;
                }
                bot.sendMessage(chatId, `–î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç: ${newUserName} (ID: ${newUserId}).`);
            });
            delete userStates[userId];
            return;
        }

        // -------- –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ, ¬´–Ω–µ–∂–¥–∞–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π¬ª -----
        if (!state.startsWith('admin_adding_')) {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            if (admin.isAdmin(userId)) {
                admin.showAdminMainMenu(bot, chatId);
            } else {
                programmer.showProgrammerMainMenu(bot, chatId, userStates, userId);
            }
        }
    });
});

// ----- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ (–∞–¥–º–∏–Ω –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É) -----
bot.on('callback_query', (query) => {
    const chatId = query.message.chat.id;
    const userId = query.from.id;
    const data = query.data;

    if (userStates[userId] && userStates[userId].state === 'admin_adding_priority') {
        if (data.startsWith('admin_priority_')) {
            const priority = data.replace('admin_priority_', '');
            userStates[userId].priority = priority;
            userStates[userId].state = 'admin_adding_assignee';

            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
            dbModule.getAllUsers((err, users) => {
                if (err || !users) {
                    bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
                    return;
                }
                // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∫–æ–º—É –Ω–∞–∑–Ω–∞—á–∏—Ç—å
                const inlineKeyboard = users.map(u => ([
                    { text: `${u.name} (${u.role})`, callback_data: `admin_assign_${u.id}` }
                ]));
                bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∑–∞–¥–∞—á–∏:', {
                    reply_markup: { inline_keyboard: inlineKeyboard },
                });
            });
        }
    } else if (userStates[userId] && userStates[userId].state === 'admin_adding_assignee') {
        if (data.startsWith('admin_assign_')) {
            const assignedId = data.replace('admin_assign_', '');
            const { title, description, priority } = userStates[userId];
            admin.addTaskToDB(bot, chatId, title, description, priority, assignedId, () => {
                delete userStates[userId]; // –°–±—Ä–æ—Å
            });
        }
    }
});

// -------------------- –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (9:00 –∏ 18:00) --------------------
schedule.scheduleJob('0 9 * * *', () => {
    sendDailyReminders();
});
schedule.scheduleJob('0 18 * * *', () => {
    sendDailyReminders();
});

function sendDailyReminders() {
    dbModule.getAllUsers((err, users) => {
        if (err || !users) return;
        users.forEach(user => {
            if (user.role === 'programmer' || user.role === 'admin') {
                dbModule.getTasks({ assigned_to: user.id, archived: 0 }, (errT, tasks) => {
                    if (errT || !tasks || tasks.length === 0) return;
                    let txt = `–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –£ –≤–∞—Å ${tasks.length} –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:\n\n`;
                    tasks.forEach(t => {
                        txt += `- [#${t.id}] ${t.title} (${t.priority})\n`;
                    });
                    bot.sendMessage(user.id, txt);
                });
            }
        });
    });
}



console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è...');
